import React, { useState } from 'react';
import Button from './Button';
import Card from './Card';
import useEmailJS from '../../hooks/useEmailJS';
import { createAdminMeetingNotification, createMeetingConfirmationTemplate } from '../../utils/emailTemplates';
import { X, Calendar, Clock, Video, User, Mail, MessageSquare, ChevronLeft, ChevronRight } from 'lucide-react';

const ZoomSchedulerModal = ({ isOpen, onClose }) => {
  const [selectedDate, setSelectedDate] = useState('');
  const [selectedTime, setSelectedTime] = useState('');
  const [currentMonth, setCurrentMonth] = useState(new Date().getMonth());
  const [currentYear, setCurrentYear] = useState(new Date().getFullYear());
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    topic: '',
    message: ''
  });
  const [loading, setLoading] = useState(false);
  const [scheduled, setScheduled] = useState(false);

  // Generate calendar days for the current month/year
  const getCalendarDays = () => {
    const today = new Date();
    const firstDay = new Date(currentYear, currentMonth, 1);
    const lastDay = new Date(currentYear, currentMonth + 1, 0);
    const startDate = new Date(firstDay);
    startDate.setDate(startDate.getDate() - firstDay.getDay());
    
    const days = [];
    const currentDate = new Date(startDate);
    
    // Generate 42 days (6 weeks) for calendar grid
    for (let i = 0; i < 42; i++) {
      const isCurrentMonth = currentDate.getMonth() === currentMonth;
      const isPast = currentDate < today.setHours(0, 0, 0, 0);
      const isWeekend = currentDate.getDay() === 0 || currentDate.getDay() === 6;
      const isAvailable = isCurrentMonth && !isPast && !isWeekend;
      
      days.push({
        date: new Date(currentDate),
        day: currentDate.getDate(),
        isCurrentMonth,
        isAvailable,
        isPast,
        isWeekend,
        value: currentDate.toISOString().split('T')[0]
      });
      
      currentDate.setDate(currentDate.getDate() + 1);
    }
    
    return days;
  };

  // Available time slots
  const timeSlots = [
    { value: '09:00', label: '9:00 AM' },
    { value: '10:00', label: '10:00 AM' },
    { value: '11:00', label: '11:00 AM' },
    { value: '14:00', label: '2:00 PM' },
    { value: '15:00', label: '3:00 PM' },
    { value: '16:00', label: '4:00 PM' },
    { value: '17:00', label: '5:00 PM' }
  ];

  const monthNames = [
    'January', 'February', 'March', 'April', 'May', 'June',
    'July', 'August', 'September', 'October', 'November', 'December'
  ];

  const weekDays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

  const handleInputChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
  };

  const handlePrevMonth = () => {
    if (currentMonth === 0) {
      setCurrentMonth(11);
      setCurrentYear(currentYear - 1);
    } else {
      setCurrentMonth(currentMonth - 1);
    }
  };

  const handleNextMonth = () => {
    if (currentMonth === 11) {
      setCurrentMonth(0);
      setCurrentYear(currentYear + 1);
    } else {
      setCurrentMonth(currentMonth + 1);
    }
  };

  const handleDateSelect = (day) => {
    if (day.isAvailable) {
      setSelectedDate(day.value);
    }
  };

  const getSelectedDateLabel = () => {
    if (!selectedDate) return '';
    const date = new Date(selectedDate);
    return date.toLocaleDateString('en-US', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  };

  const { sendEmail, loading: emailLoading } = useEmailJS();

  // Function to generate a Zoom meeting link
  const generateZoomLink = (meetingDetails) => {
    // Generate a unique meeting ID based on date, time, and client email
    const meetingId = `${meetingDetails.date.replace(/\s+/g, '')}-${meetingDetails.time.replace(/\s+/g, '')}-${meetingDetails.clientEmail.split('@')[0]}`
      .replace(/[^a-zA-Z0-9-]/g, '')
      .substring(0, 20);
    
    // Generate a random 9-digit meeting ID for Zoom format
    const zoomMeetingId = Math.floor(100000000 + Math.random() * 900000000);
    
    // Create Zoom link (this would typically be generated by Zoom API)
    const zoomLink = `https://zoom.us/j/${zoomMeetingId}?pwd=CoffexTrading${meetingId}`;
    
    return zoomLink;
  };

  const handleSchedule = async (e) => {
    e.preventDefault();
    setLoading(true);
    
    try {
      // Prepare meeting details
      const meetingDetails = {
        date: getSelectedDateLabel(),
        time: timeSlots.find(t => t.value === selectedTime)?.label,
        topic: formData.topic || 'General Consultation',
        clientName: formData.name,
        clientEmail: formData.email,
        message: formData.message
      };

      // Generate Zoom link automatically
      const zoomLink = generateZoomLink(meetingDetails);

      // Send meeting request to admin
      const adminEmailData = createAdminMeetingNotification(meetingDetails);
      await sendEmail(adminEmailData);

      // Send automatic meeting confirmation with Zoom link to client
      const confirmationEmailData = createMeetingConfirmationTemplate(meetingDetails, zoomLink);
      await sendEmail(confirmationEmailData);

      setLoading(false);
      setScheduled(true);
      
    } catch (error) {
      console.error('Error sending meeting confirmation:', error);
      setLoading(false);
      alert('There was an error confirming your meeting. Please try again.');
    }
  };

  const handleClose = () => {
    setScheduled(false);
    setSelectedDate('');
    setSelectedTime('');
    setCurrentMonth(new Date().getMonth());
    setCurrentYear(new Date().getFullYear());
    setFormData({ name: '', email: '', topic: '', message: '' });
    onClose();
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b">
          <div className="flex items-center space-x-3">
            <div className="w-10 h-10 bg-blue-600 rounded-lg flex items-center justify-center">
              <Video className="w-5 h-5 text-white" />
            </div>
            <div>
              <h2 className="text-xl font-bold text-gray-900">
                Schedule Zoom Meeting
              </h2>
              <p className="text-sm text-gray-600">
                Book a free consultation with our experts
              </p>
            </div>
          </div>
          <button
            onClick={handleClose}
            className="text-gray-400 hover:text-gray-600 transition-colors"
          >
            <X className="w-6 h-6" />
          </button>
        </div>

        <div className="p-6">
          {scheduled ? (
            // Success State
            <div className="text-center py-8">
              <div className="w-16 h-16 bg-green-500 rounded-full flex items-center justify-center mx-auto mb-4">
                <Calendar className="w-8 h-8 text-white" />
              </div>
              <h3 className="text-xl font-semibold text-green-800 mb-2">
                Meeting Confirmed Successfully!
              </h3>
              <p className="text-gray-600 mb-4">
                Your meeting has been automatically confirmed for:
              </p>
              <Card className="max-w-md mx-auto">
                <Card.Body>
                  <div className="space-y-2">
                    <div className="flex items-center justify-center space-x-2">
                      <Calendar className="w-4 h-4 text-blue-600" />
                      <span className="font-semibold">
                        {getSelectedDateLabel()}
                      </span>
                    </div>
                    <div className="flex items-center justify-center space-x-2">
                      <Clock className="w-4 h-4 text-blue-600" />
                      <span className="font-semibold">
                        {timeSlots.find(t => t.value === selectedTime)?.label}
                      </span>
                    </div>
                  </div>
                </Card.Body>
              </Card>
              <p className="text-sm text-gray-500 mt-4">
                A confirmation email with your Zoom meeting link has been sent to your email address. Please check your inbox and join the meeting at the scheduled time.
              </p>
              <Button
                onClick={handleClose}
                className="mt-6"
              >
                Close
              </Button>
            </div>
          ) : (
            // Scheduling Form
            <form onSubmit={handleSchedule} className="space-y-6">
              {/* Personal Information */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Full Name *
                  </label>
                  <div className="relative">
                    <User className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
                    <input
                      type="text"
                      name="name"
                      value={formData.name}
                      onChange={handleInputChange}
                      required
                      className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="Enter your name"
                    />
                  </div>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Email Address *
                  </label>
                  <div className="relative">
                    <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
                    <input
                      type="email"
                      name="email"
                      value={formData.email}
                      onChange={handleInputChange}
                      required
                      className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="Enter your email"
                    />
                  </div>
                </div>
              </div>

              {/* Meeting Topic */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Meeting Topic
                </label>
                <select
                  name="topic"
                  value={formData.topic}
                  onChange={handleInputChange}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                >
                  <option value="">Select a topic</option>
                  <option value="import-export">Import/Export Services</option>
                  <option value="university-admission">University Admission</option>
                  <option value="product-sourcing">Product Sourcing</option>
                  <option value="quality-inspection">Quality Inspection</option>
                  <option value="general-consultation">General Consultation</option>
                  <option value="other">Other</option>
                </select>
              </div>

              {/* Date Selection with Calendar */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-3">
                  Select Date *
                </label>
                <div className="border border-gray-300 rounded-lg p-4">
                  {/* Calendar Header */}
                  <div className="flex items-center justify-between mb-4">
                    <button
                      type="button"
                      onClick={handlePrevMonth}
                      className="p-1 hover:bg-gray-100 rounded"
                    >
                      <ChevronLeft className="w-5 h-5 text-gray-600" />
                    </button>
                    <h3 className="text-lg font-semibold text-gray-900">
                      {monthNames[currentMonth]} {currentYear}
                    </h3>
                    <button
                      type="button"
                      onClick={handleNextMonth}
                      className="p-1 hover:bg-gray-100 rounded"
                    >
                      <ChevronRight className="w-5 h-5 text-gray-600" />
                    </button>
                  </div>
                  
                  {/* Week Days Header */}
                  <div className="grid grid-cols-7 gap-1 mb-2">
                    {weekDays.map(day => (
                      <div key={day} className="text-center text-sm font-medium text-gray-500 py-2">
                        {day}
                      </div>
                    ))}
                  </div>
                  
                  {/* Calendar Days */}
                  <div className="grid grid-cols-7 gap-1">
                    {getCalendarDays().map((day, index) => (
                      <button
                        key={index}
                        type="button"
                        onClick={() => handleDateSelect(day)}
                        disabled={!day.isAvailable}
                        className={`
                          h-10 text-sm rounded transition-colors
                          ${
                            !day.isCurrentMonth
                              ? 'text-gray-300 cursor-not-allowed'
                              : day.isAvailable
                              ? selectedDate === day.value
                                ? 'bg-blue-600 text-white'
                                : 'text-gray-700 hover:bg-blue-50 hover:text-blue-600'
                              : 'text-gray-400 cursor-not-allowed'
                          }
                        `}
                      >
                        {day.day}
                      </button>
                    ))}
                  </div>
                  
                  {selectedDate && (
                    <div className="mt-3 p-2 bg-blue-50 rounded text-sm text-blue-800">
                      Selected: {getSelectedDateLabel()}
                    </div>
                  )}
                </div>
              </div>

              {/* Time Selection */}
              {selectedDate && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-3">
                    Select Time *
                  </label>
                  <div className="grid grid-cols-3 md:grid-cols-4 gap-2">
                    {timeSlots.map((time) => (
                      <button
                        key={time.value}
                        type="button"
                        onClick={() => setSelectedTime(time.value)}
                        className={`p-2 text-sm border rounded-lg transition-colors ${
                          selectedTime === time.value
                            ? 'bg-blue-600 text-white border-blue-600'
                            : 'bg-white text-gray-700 border-gray-300 hover:border-blue-300'
                        }`}
                      >
                        {time.label}
                      </button>
                    ))}
                  </div>
                </div>
              )}

              {/* Additional Message */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Additional Message
                </label>
                <div className="relative">
                  <MessageSquare className="absolute left-3 top-3 w-4 h-4 text-gray-400" />
                  <textarea
                    name="message"
                    value={formData.message}
                    onChange={handleInputChange}
                    rows={3}
                    className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-vertical"
                    placeholder="Tell us what you'd like to discuss..."
                  />
                </div>
              </div>

              {/* Action Buttons */}
              <div className="flex space-x-4 pt-4">
                <Button
                  type="button"
                  variant="outline"
                  onClick={handleClose}
                  className="flex-1"
                >
                  Cancel
                </Button>
                <Button
                  type="submit"
                  className="flex-1"
                  icon={<Calendar />}
                  loading={loading}
                  disabled={!selectedDate || !selectedTime || !formData.name || !formData.email}
                >
                  {loading ? 'Confirming Meeting...' : 'Confirm Meeting & Get Zoom Link'}
                </Button>
              </div>
            </form>
          )}
        </div>
      </div>
    </div>
  );
};

export default ZoomSchedulerModal;